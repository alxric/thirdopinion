// Code generated by reactGen. DO NOT EDIT.

package shared

import "myitcv.io/react"

type HeaderElem struct {
	react.Element
}

func buildHeader(cd react.ComponentDef) react.Component {
	return HeaderDef{ComponentDef: cd}
}

func buildHeaderElem(children ...react.Element) *HeaderElem {
	return &HeaderElem{
		Element: react.CreateElement(buildHeader, nil, children...),
	}
}

func (h HeaderDef) RendersElement() react.Element {
	return h.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// Header component.  SetState does not immediately mutate h.State()
// but creates a pending state transition.
func (h HeaderDef) SetState(state HeaderState) {
	h.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the Header component
func (h HeaderDef) State() HeaderState {
	return h.ComponentDef.State().(HeaderState)
}

// IsState is an auto-generated definition so that HeaderState implements
// the myitcv.io/react.State interface.
func (h HeaderState) IsState() {}

var _ react.State = HeaderState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (h HeaderDef) GetInitialStateIntf() react.State {
	return HeaderState{}
}

func (h HeaderState) EqualsIntf(val react.State) bool {
	return h == val.(HeaderState)
}
