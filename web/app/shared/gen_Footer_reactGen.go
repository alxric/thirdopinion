// Code generated by reactGen. DO NOT EDIT.

package shared

import "myitcv.io/react"

type FooterElem struct {
	react.Element
}

func buildFooter(cd react.ComponentDef) react.Component {
	return FooterDef{ComponentDef: cd}
}

func buildFooterElem(children ...react.Element) *FooterElem {
	return &FooterElem{
		Element: react.CreateElement(buildFooter, nil, children...),
	}
}

func (f FooterDef) RendersElement() react.Element {
	return f.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// Footer component.  SetState does not immediately mutate f.State()
// but creates a pending state transition.
func (f FooterDef) SetState(state FooterState) {
	f.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the Footer component
func (f FooterDef) State() FooterState {
	return f.ComponentDef.State().(FooterState)
}

// IsState is an auto-generated definition so that FooterState implements
// the myitcv.io/react.State interface.
func (f FooterState) IsState() {}

var _ react.State = FooterState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (f FooterDef) GetInitialStateIntf() react.State {
	return FooterState{}
}

func (f FooterState) EqualsIntf(val react.State) bool {
	return f == val.(FooterState)
}
