// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

type ViewElem struct {
	react.Element
}

func buildView(cd react.ComponentDef) react.Component {
	return ViewDef{ComponentDef: cd}
}

func buildViewElem(props ViewProps, children ...react.Element) *ViewElem {
	return &ViewElem{
		Element: react.CreateElement(buildView, props, children...),
	}
}

func (v ViewDef) RendersElement() react.Element {
	return v.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// View component.  SetState does not immediately mutate v.State()
// but creates a pending state transition.
func (v ViewDef) SetState(state ViewState) {
	v.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the View component
func (v ViewDef) State() ViewState {
	return v.ComponentDef.State().(ViewState)
}

// IsState is an auto-generated definition so that ViewState implements
// the myitcv.io/react.State interface.
func (v ViewState) IsState() {}

var _ react.State = ViewState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (v ViewDef) GetInitialStateIntf() react.State {
	return ViewState{}
}

func (v ViewState) EqualsIntf(val react.State) bool {
	return v == val.(ViewState)
}

// IsProps is an auto-generated definition so that ViewProps implements
// the myitcv.io/react.Props interface.
func (v ViewProps) IsProps() {}

// Props is an auto-generated proxy to the current props of View
func (v ViewDef) Props() ViewProps {
	uprops := v.ComponentDef.Props()
	return uprops.(ViewProps)
}

func (v ViewProps) EqualsIntf(val react.Props) bool {
	return v.Equals(val.(ViewProps))
}

var _ react.Props = ViewProps{}
