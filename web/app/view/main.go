// Template generated by reactGen

package main

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"
	"thirdopinion/internal/pkg/config"

	"myitcv.io/react"

	"honnef.co/go/js/dom"
)

//go:generate reactGen

var document = dom.GetWindow().Document()

func main() {
	loadData()
}

func generateFilter() (argumentID string) {
	baseURI := document.BaseURI()
	search := strings.Split(baseURI, "/view/")
	if len(search) == 2 {
		argumentID = search[1]
	}
	return
}

func loadData() {
	var wg sync.WaitGroup
	wg.Add(1)
	argumentID := generateFilter()
	ch, err := fetchPost(argumentID)
	switch err {
	case nil:
		go readChan(ch, &wg)
	default:
		handleError(&wg)
	}
	wg.Wait()

}

func readChan(ch chan *messageEvent, wg *sync.WaitGroup) {
	domTarget := document.GetElementByID("app")
	args := []*config.Argument{}
	defer wg.Done()
	select {
	case msg := <-ch:
		switch msg.Code.String() {
		case "1006":
			renderError("Websocket connection not working", domTarget)
		default:
			err := json.Unmarshal([]byte(msg.Data.String()), &args)
			if err != nil {
				fmt.Println(err)
				return
			}
		}
	}
	lp := LayoutProps{
		arguments: args,
	}
	react.Render(Layout(lp), domTarget)
}

func handleError(wg *sync.WaitGroup) {
	defer wg.Done()
	fmt.Println("Broken. Fix this Alex!")
}

func renderError(msg string, domTarget dom.Element) {
	lp := LayoutProps{
		Error: msg,
	}
	react.Render(Layout(lp), domTarget)

}
