// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

type RegisterElem struct {
	react.Element
}

func buildRegister(cd react.ComponentDef) react.Component {
	return RegisterDef{ComponentDef: cd}
}

func buildRegisterElem(children ...react.Element) *RegisterElem {
	return &RegisterElem{
		Element: react.CreateElement(buildRegister, nil, children...),
	}
}

func (r RegisterDef) RendersElement() react.Element {
	return r.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// Register component.  SetState does not immediately mutate r.State()
// but creates a pending state transition.
func (r RegisterDef) SetState(state RegisterState) {
	r.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the Register component
func (r RegisterDef) State() RegisterState {
	return r.ComponentDef.State().(RegisterState)
}

// IsState is an auto-generated definition so that RegisterState implements
// the myitcv.io/react.State interface.
func (r RegisterState) IsState() {}

var _ react.State = RegisterState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (r RegisterDef) GetInitialStateIntf() react.State {
	return RegisterState{}
}

func (r RegisterState) EqualsIntf(val react.State) bool {
	return r.Equals(val.(RegisterState))
}
